Objective:
The app successfully uploads files from Dropbox to AWS S3, and the upload progress UI works fine. However, after the file reaches 100%, the file does not appear in the Customize Share Page dashboard. We need to ensure that after the file is uploaded to S3, it is correctly added to the app's state and displayed.

Tasks for AI Agent
1. Debug Why the File is Not Added to the Dashboard
The onFilesSelected(uploadedFiles); function should update the app's state, but it might not be triggering correctly.
Check if onFilesSelected is executed before the state updates fully.
Ensure that all uploaded files are being passed to onFilesSelected, not just the last one.
2. Ensure onFilesSelected Updates the State Properly
Modify the loop so that all successfully uploaded files are added after the entire loop completes, instead of inside the loop.
✅ Fix: Update the function to batch update after all uploads finish
success: async (files) => {
  console.log('Files selected from Dropbox:', files);
  try {
    setIsUploading(true);
    setUploadProgress(0);
    setCurrentFileName('');

    const uploadedFiles: FileObject[] = [];

    for (const file of files) {
      try {
        setCurrentFileName(file.name);
        const url = convertDropboxUrl(file.link);
        console.log('Processing file for upload:', { name: file.name, convertedUrl: url });

        const s3Url = await uploadToS3(url, file.name);
        console.log('S3 upload completed successfully:', { name: file.name, s3Url });

        const fileObject: FileObject = {
          name: file.name,
          preview_url: s3Url,
          url: s3Url,
          isFullWidth: false,
          storageType: 's3' as const,
        };

        uploadedFiles.push(fileObject);

      } catch (error) {
        console.error('Error uploading file:', file.name, error);
        toast({
          title: "Upload Failed",
          description: `Failed to upload ${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`,
          variant: "destructive",
        });
      }
    }

    // ✅ Update app state with all uploaded files after all uploads complete
    if (uploadedFiles.length > 0) {
      console.log('Updating app state with uploaded files:', uploadedFiles);
      onFilesSelected(uploadedFiles);
    }

    toast({
      title: "Upload Complete",
      description: `Successfully uploaded ${uploadedFiles.length} files.`,
    });

  } catch (error) {
    console.error('Error in Dropbox upload process:', error);
    toast({
      title: "Error",
      description: "Failed to process Dropbox files",
      variant: "destructive",
    });
  } finally {
    setIsUploading(false);
    setUploadProgress(0);
    setCurrentFileName('');
  }
}

3. Ensure the App Fetches the Updated Files After Upload
The Customize Share Page dashboard might not be reloading the files list after an upload.
Ensure that after onFilesSelected runs, the app triggers a re-fetch of the updated files.
✅ Fix: Force a re-fetch of files after upload Modify onFilesSelected so that it also triggers a query refresh in React Query or Redux:
onFilesSelected(uploadedFiles);
queryClient.invalidateQueries(["sharePageFiles"]);

If the app uses a Redux store, ensure onFilesSelected dispatches an update action.
4. Verify the Backend API Receives and Stores the Uploaded File
The API may not be storing the file correctly in the database after upload.
Ensure the API returns the correct file metadata after a successful upload.
Log the server response and check if the uploaded file is properly saved.
✅ Fix: Log API response after upload Modify uploadToS3 to check the response:
const response = await fetch('/api/upload/dropbox', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ url, name, onProgress: true }),
});

const responseData = await response.json();
console.log("Upload API Response:", responseData);

If responseData does not contain the expected file URL, there may be an issue with how the backend saves files.

Summary of Fixes
✅ Batch file updates after all uploads finish
✅ Trigger a re-fetch of the files list after upload
✅ Log and verify the API response to ensure files are correctly saved
With these fixes, the uploaded files should correctly appear on the Customize Share Page dashboard after upload. 
