Issue:
The password update feature is failing with the error "Unexpected token '<', '<!DOCTYPE' is not valid JSON". This suggests that the API response is returning HTML instead of JSON, likely due to a missing or broken API route.
Tasks to Fix the Issue:
1️⃣ Debug API Response
Modify the changePasswordMutation function to log the raw response before parsing.
Ensure that the API is returning valid JSON, not HTML or an error page.
Add the following logging inside the mutation function:
const response = await fetch('/api/change-password', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(data),
});

const text = await response.text(); // Read raw response first
console.log("API Response:", text); // Log full response

if (!response.ok) {
  throw new Error(`Request failed: ${response.status} ${response.statusText}`);
}

return JSON.parse(text); // Parse JSON if valid

Verify the API Route Exists
Ensure that the API route POST /api/change-password exists and correctly processes password updates.
If missing, create the API route in Next.js API routes (pages/api/change-password.ts) or the backend.
The API should handle POST requests and return JSON:
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: "Method Not Allowed" });
  }

  const { currentPassword, newPassword } = req.body;
  if (!currentPassword || !newPassword) {
    return res.status(400).json({ message: "Missing required fields" });
  }

  try {
    // Add logic to verify & update password
    return res.status(200).json({ message: "Password changed successfully" });
  } catch (error) {
    return res.status(500).json({ message: "Internal Server Error" });
  }
}

Ensure API Authentication (if required)
If authentication is required, make sure the request includes the correct headers:
const response = await fetch('/api/change-password', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${authToken}`, // Add authentication
  },
  body: JSON.stringify(data),
});

Handle Errors Gracefully
If the API returns HTML or a non-JSON response, catch the error and provide a meaningful message instead of crashing.
if (!response.ok) {
  try {
    const errorJson = JSON.parse(await response.text());
    throw new Error(errorJson.message || 'Failed to change password');
  } catch {
    throw new Error('Unexpected response from server');
  }
}

Expected Outcome:
The password update feature should properly send the request, process the response, and show success/error messages as needed.
If the API does not exist, the agent should create it.
If authentication is required, the request should be modified accordingly.

