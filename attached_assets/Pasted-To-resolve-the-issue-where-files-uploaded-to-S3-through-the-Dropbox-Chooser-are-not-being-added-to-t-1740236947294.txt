To resolve the issue where files uploaded to S3 through the Dropbox Chooser are not being added to the files in your app or to the share page, we will ensure that the uploaded files are successfully passed to the onFilesSelected callback in the DropboxChooser component. This callback should be correctly invoked after the upload process is complete.
Here’s a step-by-step guide on fixing the issue:
Check the onFilesSelected Callback:
Ensure that the handleDropboxSelect function invokes onFilesSelected with the uploadedFiles array after all files have been uploaded successfully.
Modify the handleDropboxSelect Function:
At the end of the file upload loop, call onFilesSelected(uploadedFiles).
Updated handleDropboxSelect Function
Here’s the updated code snippet for your DropboxChooser component:
const handleDropboxSelect = React.useCallback(async () => {
  if (!window.Dropbox) {
    console.error('Dropbox chooser not loaded');
    return;
  }


  window.Dropbox.choose({
    success: async (files) => {
      console.log('Files selected from Dropbox:', files);
      try {
        setIsUploading(true);
        setUploadProgress(0);
        setCurrentFileName('');


        const uploadedFiles: FileObject[] = [];
        for (const file of files) {
          try {
            setCurrentFileName(file.name);
            const url = convertDropboxUrl(file.link);
            console.log('Processing file for upload:', {
              name: file.name,
              convertedUrl: url
            });


            const s3Url = await uploadToS3(url, file.name);
            console.log('S3 upload completed successfully:', {
              name: file.name,
              s3Url
            });


            const fileObject: FileObject = {
              name: file.name,
              preview_url: s3Url,
              url: s3Url,
              isFullWidth: false,
              storageType: 's3' as const,
            };
            console.log('Created FileObject:', fileObject);
            uploadedFiles.push(fileObject);


          } catch (uploadError) {
            console.error('Error uploading file:', uploadError);
          }
        }


        // Ensure the uploaded files are passed to onFilesSelected
        onFilesSelected(uploadedFiles);


      } finally {
        setIsUploading(false);
      }
    },
    cancel: () => {
      console.log('Dropbox chooser cancelled');
    },
    linkType: "preview",
    multiselect: true,
    extensions: ['.pdf', '.doc', '.jpg', '.png'], // Add your desired extensions
  });
}, [onFilesSelected]);


Update Your Parent Component
In your parent component (e.g., where DropboxChooser is being used), ensure that the handleDropboxFiles function properly updates your state with the newly uploaded files.
For example, ensure it looks similar to this:
const handleDropboxFiles = (newFiles: FileObject[]) => {
  console.log('Received files from Dropbox:', newFiles);
  const updatedFiles = [...files, ...newFiles]; // Ensure `files` is your current state
  form.setValue('files', updatedFiles, { shouldDirty: true });
  console.log('Updated form state with files:', updatedFiles);
  // Assuming 'onAddFiles' updates the UI
  onAddFiles(newFiles);
};


Summary
With these updates, the uploaded files from the Dropbox chooser will associate with the onFilesSelected callback and be added to your application's files. This integration should allow the files to show up on any share page or in the state maintained by your component.
Make the suggested changes in your existing code to fix the issue.



