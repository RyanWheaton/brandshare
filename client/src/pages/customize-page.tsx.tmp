import React, { useEffect, useRef, useState } from 'react';
import { useAuth } from "@/hooks/use-auth";
import { useQuery, useMutation } from "@tanstack/react-query";
import { SharePage, SharePageTemplate, insertSharePageSchema, insertTemplateSchema, InsertSharePage, InsertTemplate } from "@shared/schema";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useLocation } from "wouter";
import { convertDropboxUrl } from "@/lib/utils";
import { Plus } from "lucide-react";
import { DropboxChooser } from "@/components/ui/dropbox-chooser";
import { SortableFiles } from "@/components/ui/sortable-files";

// Fixed interface with required fields
interface FileObject {
  name: string;
  preview_url: string;
  url: string;
  isFullWidth: boolean;
  title?: string;
  description?: string;
  storageType: 'dropbox' | 's3';
}

interface FormValues extends InsertSharePage {
  title: string;
  titleFont: string;
  descriptionFont: string;
  titleFontSize: number;
  descriptionFontSize: number;
  logoSize: number;
  footerText?: string;
  footerBackgroundColor?: string;
  footerTextColor?: string;
  showFooter?: boolean;
  footerLogoUrl?: string;
  footerLogoSize?: number;
  footerLogoLink?: string;
  logoUrl?: string;
  buttonBackgroundColor?: string;
  buttonBorderColor?: string;
  buttonTextColor?: string;
  files: FileObject[];
}

async function uploadFileToS3(file: File): Promise<{ url: string; name: string }> {
  const formData = new FormData();
  formData.append('file', file);

  const response = await fetch('/api/upload', {
    method: 'POST',
    body: formData,
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.details || error.error || 'Failed to upload file to S3');
  }

  const data = await response.json();
  return {
    url: data.url,
    name: file.name,
  };
}

function FileList({
  files,
  onUpdateFile,
  onAddFiles,
  form
}: {
  files: FileObject[];
  onUpdateFile: (index: number, updates: Partial<FileObject>) => void;
  onAddFiles: (newFiles: FileObject[]) => void;
  form: any;
}) {
  const { toast } = useToast();
  const [isUploading, setIsUploading] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState<{ url: string; timestamp: number }[]>([]);

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!event.target.files?.length) return;

    setIsUploading(true);
    try {
      const uploadedFiles = await Promise.all(
        Array.from(event.target.files).map(async (file) => {
          const result = await uploadFileToS3(file);
          setUploadedFiles(prev => [...prev, { url: result.url, timestamp: Date.now() }]);
          return {
            name: result.name,
            url: result.url,
            preview_url: result.url,
            isFullWidth: false,
            storageType: 's3' as const
          };
        })
      );

      onAddFiles(uploadedFiles);
    } catch (error) {
      console.error('Upload failed:', error);
      toast({
        title: "Upload Failed",
        description: error instanceof Error ? error.message : "There was an error uploading your files. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsUploading(false);
    }
  };

  useEffect(() => {
    return () => {
      const unsavedFiles = uploadedFiles.filter(file => {
        const fileAge = Date.now() - file.timestamp;
        return fileAge > 1000;
      });

      if (unsavedFiles.length > 0) {
        console.log('Cleaning up unsaved files:', unsavedFiles);
        unsavedFiles.forEach(async (file) => {
          try {
            if (!file.url) return;

            const fileUrl = new URL(file.url);
            if (!fileUrl.hostname.includes('amazonaws.com')) return;

            const key = decodeURIComponent(fileUrl.pathname.substring(1));
            await fetch(`/api/files/${encodeURIComponent(key)}`, {
              method: 'DELETE',
            });
            console.log('Cleaned up file:', key);
          } catch (error) {
            console.error('Error during file cleanup:', error);
          }
        });
      }
    };
  }, [uploadedFiles]);

  return (
    <div className="space-y-4">
      <div className="flex flex-col gap-4">
        <div className="flex gap-2">
          <Input
            type="file"
            multiple
            onChange={handleFileSelect}
            className="flex-1"
            disabled={isUploading}
          />
          <DropboxChooser
            onFilesSelected={onAddFiles}
            className="shrink-0"
          >
            <Button type="button" variant="outline" className="gap-2">
              <Plus className="h-4 w-4" />
              Dropbox
            </Button>
          </DropboxChooser>
        </div>
        {isUploading && (
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            <Loader2 className="h-4 w-4 animate-spin" />
            Uploading files...
          </div>
        )}
      </div>

      <SortableFiles
        files={files}
        onReorder={(newFiles) => {
          form.setValue('files', newFiles, { shouldDirty: true });
        }}
        onRemove={(index) => {
          const newFiles = [...files];
          newFiles.splice(index, 1);
          form.setValue('files', newFiles, { shouldDirty: true });
        }}
        onToggleFullWidth={(index) => {
          onUpdateFile(index, { isFullWidth: !files[index].isFullWidth });
        }}
        onUpdateMetadata={(index, updates) => {
          onUpdateFile(index, updates);
        }}
      />
    </div>
  );
}

function LogoPreview({ url, size }: { url: string; size: number }) {
  const [aspectRatio, setAspectRatio] = useState(1);

  useEffect(() => {
    if (url) {
      const img = new Image();
      img.onload = () => {
        setAspectRatio(img.width / img.height);
      };
      img.src = convertDropboxUrl(url);
    }
  }, [url]);

  const width = size;
  const height = Math.round(size / aspectRatio);

  return (
    <div className="relative w-full h-40 border rounded-lg overflow-hidden">
      <img
        src={convertDropboxUrl(url)}
        alt="Logo Preview"
        className="w-full h-full object-contain"
        style={{
          maxWidth: width,
          maxHeight: height
        }}
      />
    </div>
  );
}

interface CustomizePageProps {
  params: { id: string };
  isTemplate?: boolean;
}

export default function CustomizePage({ params, isTemplate = false }: CustomizePageProps) {
  const { toast } = useToast();
  const [, setLocation] = useLocation();
  const [isCopied, setIsCopied] = useState(false);
  const [activeTab, setActiveTab] = useState<string>("customize");
  const { user } = useAuth();
  const abortControllerRef = useRef<AbortController | null>(null);
  const [uploadedFiles, setUploadedFiles] = useState<{ url: string; timestamp: number }[]>([]);
  const isUnmountingRef = useRef(false);

  // Parse and validate id at the start
  const id = params?.id ? parseInt(params.id) : null;
  const isValidId = id !== null && !isNaN(id);

  if (!isValidId) {
    setLocation("/");
    return null;
  }

  const apiEndpoint = isTemplate ? `/api/templates/${id}` : `/api/pages/${id}`;

  // Query data and form setup
  const { data: item, isLoading } = useQuery<SharePage | SharePageTemplate>({
    queryKey: [apiEndpoint],
    retry: false,
    gcTime: 0,
    staleTime: Infinity,
    enabled: isValidId && activeTab === "customize",
  });

  const form = useForm<FormValues>({
    resolver: zodResolver(isTemplate ? insertTemplateSchema : insertSharePageSchema),
    defaultValues: {
      title: "",
      description: "",
      backgroundColor: "#ffffff",
      backgroundColorSecondary: "",
      textColor: "#000000",
      titleFont: "Inter",
      descriptionFont: "Inter",
      titleFontSize: 24,
      descriptionFontSize: 16,
      logoSize: 200,
      files: [],
      logoUrl: "",
      footerText: "",
      footerBackgroundColor: "#f3f4f6",
      footerTextColor: "#000000", 
      showFooter: true,
      footerLogoUrl: "",
      footerLogoSize: 150,
      footerLogoLink: "",
      buttonBackgroundColor: "#007bff",
      buttonBorderColor: "#007bff",
      buttonTextColor: "#ffffff",
      ...(isTemplate ? {} : {
        password: "",
        expiresAt: undefined,
      }),
    },
    values: item ? {
      ...item,
      files: (item.files || []) as FileObject[],
      buttonBackgroundColor: (item as SharePage).buttonBackgroundColor || "#007bff",
      buttonBorderColor: (item as SharePage).buttonBorderColor || "#007bff",
      buttonTextColor: (item as SharePage).buttonTextColor || "#ffffff",
    } : undefined,
  });

  const handleFileUpdate = (index: number, updates: Partial<FileObject>) => {
    const newFiles = [...form.getValues().files];
    newFiles[index] = { ...newFiles[index], ...updates };
    form.setValue('files', newFiles, { shouldDirty: true });
  };

  const handleAddFiles = (newFiles: FileObject[]) => {
    const currentFiles = form.getValues().files;
    form.setValue('files', [...currentFiles, ...newFiles], { shouldDirty: true });
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-border" />
      </div>
    );
  }

  if (!item) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-2">Not Found</h1>
          <p className="text-muted-foreground">
            This {isTemplate ? 'template' : 'share page'} doesn't exist or has been removed.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <FileList
        files={form.getValues().files}
        onUpdateFile={handleFileUpdate}
        onAddFiles={handleAddFiles}
        form={form}
      />
    </div>
  );
}